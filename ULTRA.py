import disnake
from disnake.ext import commands
from disnake.ext.commands import bot
from disnake.utils import get
import config
import asyncio
import time
from roles import sqlite3
import roles
from time import strftime
from time import localtime


def get_user_data():
    conn = sqlite3.connect('leveling.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, level, experience FROM users')
    user_data = cursor.fetchall()
    conn.close()
    return user_data

def check_user_experience():
    user_data = get_user_data()
    for user_id, username, level, experience in user_data:
        if experience >= 5 * level:
            level += 1
            update_user_level(user_id, level)
            print ('–ù–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
            
def update_user_level(user_id, new_level):
    conn = sqlite3.connect('leveling.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET level = ? WHERE user_id = ?', (new_level, user_id))
    conn.commit()
    conn.close()

bot = commands.Bot(command_prefix=config.PREFIX, help_command=None, intents=disnake.Intents.all())

@bot.event
async def on_ready():
    await bot.change_presence(status=disnake.Status.dnd, activity=disnake.Game(name=".help", type=2))
    print("[!] Logged in as:")
    print("[!] Status: ‚úÖ")
    print("[!] The bot is ready to work")
    check_user_experience()

@bot.event
async def on_message(message):
    check_user_experience()
    await bot.process_commands(message)

    msg = message.content.lower()
    censored_words = config.PROHIBITED_WORDS

    for bad_content in msg.split():
        if bad_content in censored_words:
            await message.delete()
            await message.channel.send(f"{message.author.mention}**, –∞–π-–∞–π-–∞–π... –ü–ª–æ—Ö–æ, –ø–ª–æ—Ö–æ, —Ç–∞–∫ –Ω–µ–ª—å–∑—è!**")

@bot.event
async def on_raw_reaction_add(payload):
    post_id = config.MESSAGE_ID
    role_id = config.ID_ROLE

    role_name = "–£—á–∞—Å—Ç–Ω–∏–∫üëÄ"
    message_id = payload.message_id
    author = payload.member
    if(message_id == post_id):
        role = disnake.utils.get(payload.member.guild.roles, id=config.ID_ROLE)
        await author.add_roles(role)
        print(format(payload.member) + ' got the role:' + '\''+role_name+'\'!')

@bot.event
async def on_command_error(ctx, error):
    print(error)

    if isinstance(error, commands.MissingPermissions):
        await ctx.send(f"**{ctx.author}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!**")
    elif isinstance(error, commands.UserInputError):
        await ctx.send(embed=disnake.Embed(
            description=f"**–ü—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: `{ctx.prefix}{ctx.command.name}` ({ctx.command.brief})\nExample: {ctx.prefix}{ctx.command.usage}**"
        ))
       
        #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def is_guild_owner():
    def predicate(ctx):
        return ctx.guild is not None and ctx.guild.owner_id == ctx.author.id
    return commands.check(predicate)

@bot.command(name="—Ä–∞–Ω–∫", aliases=["rank", "rk"], brief="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å", usage="rank")
async def rank(ctx):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
        
    user_id = ctx.author.id
    user = roles.get_user(user_id)

    emb = disnake.Embed(color=344462)
    emb.add_field(name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á", value=user[1], inline = False)
    emb.add_field(name="–†—ñ–≤–µ–Ω—å:", value = user[2], inline = False)
    emb.add_field(name="–î–æ—Å–≤—ñ–¥:", value = user[3], inline = False)
    await ctx.send(embed = emb)

@bot.command(name="—Ä–µ–π—Ç–∏–Ω–≥", aliases=["rating", "rate"], brief="–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–æ–º", usage="rating")
async def ratings(ctx):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
        
    conn = sqlite3.connect('leveling.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, level, experience FROM users')
    user_data = cursor.fetchall()

    sorted_users = sorted(user_data, key=lambda x: (x[2], x[3]), reverse=True)

    rating_message = "–¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n"
    for i, (user_id, username, level, experience) in enumerate(sorted_users, start=1):
        rating_message += f"{i}. {username}: –†—ñ–≤–µ–Ω—å {level}, –î–æ—Å–≤—ñ–¥ {experience}\n"
    await ctx.send(rating_message)

    conn.close()


@bot.command(name="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", aliases=["chek"], brief="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", usage="check")
@commands.check_any(commands.is_owner(), is_guild_owner())
async def chek(ctx):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    guild = str(ctx.guild)
    await ctx.author.send(f'**{ctx.guild}**: –í–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!')
    await ctx.send(f'**{ctx.guild}**: –í–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!')
    #############################
@bot.command()
async def whereami(ctx):
   await ctx.send(f'You are on {ctx.guild} on {ctx.channel}')

@bot.command()
@commands.has_permissions(administrator=True, manage_messages=True)
async def say(ctx, * , arg):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    emb = disnake.Embed(title = f'**{ctx.guild}**\n' + arg, color=000000)
    await ctx.message.delete()
    await ctx.send(embed=emb)

@bot.command(name="–º—É—Ç", aliases=["mute", "mute-member"], brief="–ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", usage="mute <member> <time> <reason>")
@commands.has_permissions(administrator=True,manage_roles=True)
async def mute(ctx, member: disnake.Member, mute_time: int, reason):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    mute_role = disnake.utils.get(ctx.message.guild.roles, id=config.MUTE_ROLE_ID)
    emb = disnake.Embed(color=344462)
    emb.add_field(name="‚úÖ Muted", value='–ö–æ—Ä–∏—á—Ç—É–≤–∞—á {} –±—É–≤ –∑–∞–º—å—é—á–µ–Ω!'.format(member.mention))
    emb.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value = ctx.message.author.mention, inline = False)
    emb.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value = reason, inline = False)
    emb.add_field(name="–ß–∞—Å", value = mute_time, inline = False)
    await ctx.send(embed = emb)
    await ctx.author.send(f'**{ctx.guild}**: –í–∞—Å –∑–∞–º—É—Ç–∏–ª–∏!')
    await member.add_roles(mute_role)
    await asyncio.sleep(mute_time * 60)
    await member.remove_roles(mute_role)

#—Ä–∞–∑–º—É—Ç
@bot.command()
@commands.has_permissions(administrator=True)
async def unmute(ctx, member: disnake.Member):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    mute_role = disnake.utils.get(member.guild.roles, id=config.MUTE_ROLE_ID)
    emb = disnake.Embed(color=344462)
    emb.add_field(name="‚úÖ UnMuted", value='–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {} –±—É–≤ —Ä–∞–∑–º—å—é—á–µ–Ω!'.format(member.mention))
    emb.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value = ctx.message.author.mention, inline = False)
    await ctx.send(embed = emb)
    await ctx.author.send(f'**{ctx.guild}**: –í–∞—Å —Ä–æ–∑–º—É—Ç–∏–ª–∏!')
    await member.remove_roles(mute_role)

@bot.command(name="–æ—á–∏—Å—Ç–∏—Ç–∏", aliases=["clear", "cl"], brief="–û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç –≤—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", usage="clear <amount=10>")
@commands.has_permissions(administrator=True, manage_messages=True)
async def clear(ctx, amount: int=10):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    await ctx.channel.purge(limit=amount + 1)
    await ctx.send(f"**{ctx.guild}**:–ë—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ {amount + 1} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.", delete_after=3)

@bot.command(name="–∫–∏–∫", aliases=["kick", "kick-member"], brief="–í–∏–≥–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞", usage="kick <@user> <reason=None>")
@commands.has_permissions(administrator=True, kick_members=True)
async def kick(ctx, member: disnake.Member, *, reason=None):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    await ctx.message.delete()
    await ctx.send(f"**{ctx.guild}**: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {member.mention}, –±—É–≤ –≤–∏–≥–Ω–∞–Ω–∏–π —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞!", delete_after=3)
    await ctx.author.send(f'**{ctx.guild}**: –í–∞—Å –∫—ñ–∫–Ω—É–ª–∏!')
    await member.kick(reason=reason)

@bot.command(name="–±–∞–Ω", aliases=["ban", "ban-member"], brief="–ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ", usage="ban <@user> <reason=None>")
@commands.has_permissions(administrator=True, ban_members=True)
async def ban(ctx, member: disnake.Member, *, reason=None):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    await ctx.message.delete()
    await ctx.send(f"**{ctx.guild}**: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {member.mention}, –±—É–≤ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
    await ctx.author.send(f'**{ctx.guild}**: –í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏!')
    await member.ban(reason=reason)

@bot.command(name="—Ä–∞–∑–±–∞–Ω–∏—Ç—å", aliases=["unban", "unban-member"], brief="–†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ", usage="unban <user_id>")
@commands.has_permissions(administrator=True, ban_members=True)
async def unban(ctx, user_id: int):
    user_id = ctx.author.id
    user = roles.get_user(user_id)
    
    if user:
        roles.update_user_exp(user_id)
    else:
        roles.add_user(user_id, ctx.author.name)
    user = await bot.fetch_user(user_id)
    await ctx.guild.unban(user)
    await ctx.send(f"**{ctx.guild}**: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–±–∞–Ω–µ–Ω–∏–π")
    await ctx.author.send(f'**{ctx.guild}**: –í–∞—Å —Ä–æ–∑–±–∞–Ω–∏–ª–∏!')

@bot.command()
async def join(msg):
    try:
        voice_client = await msg.author.voice.channel.connect()
    except:
        print("error")
        
@bot.command()
async def help( ctx ):
        emb = disnake.Embed( title = f'‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞ **{ctx.guild}**', color=344462)
        emb.add_field( name = '{}clear'.format( config.PREFIX ), value = '–†–æ–∑–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ', inline = False)
        emb.add_field( name = '{}kick'.format( config.PREFIX ), value = '–ö—ñ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', inline = False)
        emb.add_field( name = '{}mute'.format( config.PREFIX ), value = '–í–∏–¥–∞—Ç–∏ –º—É—Ç —É—á–∞—Å–Ω–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞', inline = False)
        emb.add_field( name = '{}unmute'.format( config.PREFIX ), value = '–ó–Ω—è—Ç—Ç—è –º—É—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ', inline = False)
        emb.add_field( name = '{}chek'.format( config.PREFIX ), value = '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞', inline = False)
        emb.add_field( name = '{}ban'.format( config.PREFIX ), value = '–ë–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ')
        emb.add_field( name = '{}say'.format( config.PREFIX ), value = '–î—É–±–ª—é–≤–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', inline = False)
        emb.set_thumbnail(ctx.author.avatar)
        emb.add_field( name = '{}info'.format( config.PREFIX ), value = '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', inline = False)
        await ctx.author.send(embed = emb)
        await ctx.send(f'**{ctx.guild}**: *****–ù–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ –ª–∏—á–∫—É :D*****')

bot.run(config.TOKEN)
